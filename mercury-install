#!/bin/bash
REPO="http://192.168.1.143:88"
INSTALL_PATH=/mnt
packages=$@
# Built For Tucana Version 1.1
# DO NOT Use this version (git) on an actual tucana system without changing the INSTALL_PATH   to /  and the REPO_PATH.  Use the version in the repos

if [[ $EUID -ne 0 ]]; then
   echo "This package manager must be run as root" 
   exit 1
fi

check_online() {

   cd /tmp
   wget $REPO/available-packages/sha256 &> /dev/null
   if [[ $? != 0 ]]; then
     echo "ERROR: Server not reachable or doesn't contain repo files"
     exit 1
   fi


}


generate_file_list() {
  local PACKAGE=$1
  cd $INSTALL_PATH/var/cache/mercury/$PACKAGE
  touch $INSTALL_PATH/var/cache/mercury/file-lists/$PACKAGE.list
  # File lists are always generated for the root directory
  find * -type f | sed 's|^|/|g' > $INSTALL_PATH/var/cache/mercury/file-lists/$PACKAGE.list
  cd $INSTALL_PATH/var/cache/mercury

}

postinst() {
  if [[ ! $POSTINST ]]; then
      return 0
  fi
  for PACKAGE in $POSTINST; do
      echo "Running $PACKAGE Post install"
      bash /tmp/$PACKAGE-postinst
  done
}

install_package() {
    local PACKAGE=$1
    # This check is mostly redundant since the offical release of version 1.0, but just incase there is a special case that the remove already installed packages loop doesn't get, I am leaving this in. This can be removed to reduce line count
    if cat $INSTALL_PATH/etc/installed_package | grep -x $PACKAGE; then
        echo "$PACKAGE is already installed, skipping"
        return 1
    else
        mkdir -p $INSTALL_PATH/var/cache/mercury
        cd $INSTALL_PATH/var/cache/mercury
        echo "$REPO/packages/$PACKAGE.tar.xz"
        echo "Downloading $PACKAGE"

        wget -O $INSTALL_PATH/var/cache/mercury/$PACKAGE.tar.xz $REPO/packages/$PACKAGE.tar.xz

        echo "Installing $PACKAGE..."
        echo "Extracting $PACKAGE..."
        tar -xpf $PACKAGE.tar.xz

        echo "Generating File list"
        generate_file_list "$PACKAGE"

        echo "Copying contents..."
	cp -rp $PACKAGE/* $INSTALL_PATH
        #Check if postinst exists
         if [ -f $PACKAGE/postinst ]; then
            # Save the post installs to run later 
            cp $PACKAGE/postinst /tmp/$PACKAGE-postinst
            POSTINST="$POSTINST $PACKAGE"
         fi
        echo $PACKAGE >> $INSTALL_PATH/etc/installed_package
        echo  "Removing Cache"
        rm -rf $INSTALL_PATH/var/cache/mercury/$PACKAGE*
    fi
}

get_depends() {


# If there is only 1 package in the queue, check to see if that package is installed.  This is just for looks, all it does is make sure that getting dependencies does not pop up when there is only 1 package, this can be removed if line count is prefered over looks.
local numpkg=$(echo $packages | wc -w)
if [[ $numpkg == 1 ]]; then
  if cat $INSTALL_PATH/etc/installed_package | grep -x $package >/dev/null; then
	  packages=""
	  return 0
  fi
fi


echo "Getting Dependencies"
until [ "$packages" == "$packageold" ] 
do
 packageold=$packages
 for package in ${packages[@]}
 do
     if cat $INSTALL_PATH/etc/installed_package | grep -x $package >/dev/null; then
	 :
     else
         packages="$packages $(cat $INSTALL_PATH/var/cache/mercury/depend/depend-$package)"
         packages=$( awk 'BEGIN{RS=ORS=" "}!a[$0]++' <<<$packages );
     fi
 done
done

# Get rid of repeats (also in depend check)
packages=$( awk 'BEGIN{RS=ORS=" "}!a[$0]++' <<<$packages );
# Take the mutliline packages variable and convert it to a single line
packages=$(echo "$packages" | tr ' ' '\n' | nl | sort -u -k2 | sort -n | cut -f2-) 


# Remove any already installed packages. This works by only adding packages to a new variable if they are NOT installed, at the end the new variable is set to the packages variable
for package in ${packages[@]}
do
  if cat $INSTALL_PATH/etc/installed_package | grep -x $package >/dev/null; then
     :
  else
     packages_new=$(echo "$packages_new $package")	  
  fi
done

packages=$packages_new


}

check_if_packages_exist() {

# Make sure the root (actually inputed) packages exist, this check is repeated for the depends (I mess up some times with the depend files) 
for package in ${packages[@]}
do
   if [[ $(cat $INSTALL_PATH/var/cache/mercury/available-packages | grep -x $package | wc -c) == 0 ]]
   then
           echo "$package was not found, exiting"
           exit 1
   fi  
done

}

check_for_flags() {
  for package in $packages; do
    if [[ $package == --y ]]; then
      NO_CONFIRM="true"
      packages=$(sed 's/--y//g' <<< $packages)
    fi
  done


}

# Check for mercury flags
check_for_flags

# Check if the server is online
check_online


# Run the check function
check_if_packages_exist

# Run the depends function
get_depends



numpackage=$(wc -w <<< $packages)
# Basically the same thing but just for safety lol
pkgnoline=$(tr "\n" " " <<< $packages)

# Sanity check to make sure that all packages exist (See function for details)
check_if_packages_exist


# Literally just for calamares
if [[ $NO_CONFIRM == "true" ]]; then
  for package in ${packages[@]}; do
        install_package "$package"
  done
  #postinst
  exit 0
fi


if test $numpackage -ne 0; then
 printf "\n\nPackages to be installed: $pkgnoline\n"
 read -r -p "$numpackage packages are queued to install, would you like to continue? [Y/n] " confirmation

 case $confirmation in
      "" | Y | y)
  echo "Continuing with install of $numpackage packages"
  for package in ${packages[@]}
  do
      install_package "$package"
  done
  #postinst

  ;;
   *)
  echo "Aborting Invalid Input!"
  ;;
 esac
 else 
  printf "Nothing to do all packages are installed\n"
fi
